generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./../data/databasemuhajirin.db"
}

model Post {
  id            String         @id @default(cuid())
  title         String
  content       String
  excerpt       String?
  category      String         @default("PENGUMUMAN")
  tags          String         @default("[]")
  status        String         @default("DRAFT")
  isPinned      Boolean        @default(false)
  isApproved    Boolean        @default(true)
  viewCount     Int            @default(0)
  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  comments      Comment[]
  reactions     PostReaction[]
  bookmarks     Bookmark[]
  notifications Notification[]
  postViews     PostView[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([category])
  @@index([status])
  @@index([isPinned])
  @@index([createdAt])
  @@index([authorId])
  @@index([isApproved])
  @@map("posts")
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  postId        String
  post          Post           @relation(fields: [postId], references: [id])
  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  parentId      String?
  parent        Comment?       @relation("CommentReplies", fields: [parentId], references: [id])
  replies       Comment[]      @relation("CommentReplies")
  status        String         @default("PENDING")
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([postId])
  @@index([parentId])
  @@map("comments")
}

model PostReaction {
  id        String   @id @default(cuid())
  type      String   @default("LIKE")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("post_reactions")
}

model Bookmark {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   @default("COMMENT")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}

model User {
  id                           String                      @id @default(cuid())
  name                         String
  panggilan                    String                      @default("")
  gender                       String                      @default("")
  username                     String                      @unique
  email                        String                      @unique
  password                     String
  role                         String                      @default("ANAK_REMAS")
  active                       Boolean                     @default(true)
  kategori                     String                      @default("mkidz")
  groupId                      String?
  avatar                       String?                     @default("/avatars/avatar-01.jpg")
  tanggalLahir                 DateTime?
  age                          Int                         @default(0)
  nomerWhatsapp                String?
  alamatRumah                  String?
  rwRumah                      String?
  rtRumah                      String?
  sekolah                      String?
  kelas                        Int?
  keterangan                   String?  
  createdAt                    DateTime                    @default(now())
  updatedAt                    DateTime                    @updatedAt
  submittedActivities          UserActivity[]              @relation("submittedActivities")
  validatedActivities          UserActivity[]              @relation("validatedActivities")
  achievements                 UserAchievement[]
  streaks                      UserStreak[]
  dailyScores                  DailyScore[]
  weeklyScores                 WeeklyScore[]
  monthlyScores                MonthlyScore[]
  penalties                    UserPenalty[]
  level                        UserLevel?
  posts                        Post[]
  comments                     Comment[]
  postReactions                PostReaction[]
  bookmarks                    Bookmark[]
  notifications                Notification[]
  postViews                    PostView[]
  activityValidations          ActivityValidator[]         @relation("validatorUser")
  validationHistory            ActivityValidationHistory[] @relation("validatorHistory")
  orangTuaAnakRemasAsOrangTua  OrangTuaAnakRemas[]         @relation("orangTua")
  orangTuaAnakRemasAsAnakRemas OrangTuaAnakRemas[]         @relation("anakRemas")

  @@map("users")
}

// Constants that will be enforced at application level
// ActivityCategory: IBADAH, AKHLAK, PEMBELAJARAN, KAJIAN, DAKWAH, SOSIAL, LAINNYA
// UserRole: KOORDINATOR_ANAKREMAS, ANAK_REMAS, MARBOT, TAKMIR, ADMIN, ORANG_TUA
// ActivityStatus: PENDING, VALIDATED, REJECTED

model Activity {
  id              String   @id @default(cuid())
  name            String
  category        String   @default("AKHLAK")
  type            String   @default("TAMBAHAN") // UTAMA atau TAMBAHAN
  userCategories  String   @default("mkidz") // Comma-separated categories (mkidz,laz)
  minFrequency    Int      @default(1) // Frekuensi minimal harian
  maxFrequency    Int // Frekuensi maksimal harian
  basePoints      Int
  description     String?
  icon            String?
  isNegative      Boolean  @default(false)
  needsProof      Boolean  @default(false)
  validationRoles String   @default("KOORDINATOR_ANAKREMAS") // Comma-separated roles
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  active          Boolean  @default(true)

  userActivities UserActivity[]
  validators     ActivityValidator[]
  targets        ActivityTarget[]
  combos         ActivityCombo[]     @relation("activityCombos")

  @@map("Activity") // Explicitly map the model to the "Activity" table
}

model UserActivity {
  id              String    @id @default(cuid())
  userId          String
  activityId      String
  date            DateTime
  points          Int
  multiplier      Float     @default(1)
  finalPoints     Int
  proof           String? // URL to proof if needed
  status          String    @default("PENDING") // PENDING, VALIDATED, REJECTED
  validatedById   String?
  validatedAt     DateTime?
  rejectionReason String? // TAK_DILAKUKAN, TAK_CUKUP_BUKTI
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user        User     @relation("submittedActivities", fields: [userId], references: [id])
  activity    Activity @relation(fields: [activityId], references: [id])
  validatedBy User?    @relation("validatedActivities", fields: [validatedById], references: [id])

  validationHistory ActivityValidationHistory[]

  @@index([userId, date])
  @@index([status])
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  type        String // BASIC, COMBO, STREAK, SPECIAL
  description String
  icon        String
  conditions  String // JSON string for conditions
  multiplier  Float    @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  active      Boolean  @default(true)

  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime  @default(now())
  expiresAt     DateTime?
  active        Boolean   @default(true)

  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])
}

model UserStreak {
  id            String   @id @default(cuid())
  userId        String
  activityId    String
  currentStreak Int      @default(0)
  maxStreak     Int      @default(0)
  lastActivity  DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model DailyScore {
  id           String   @id @default(cuid())
  userId       String
  date         DateTime
  skorTotal    Int
  skorPositif  Int      @default(0)
  skorNegatif  Int      @default(0)
  utamaDone    Int      @default(0) // Jumlah aktivitas utama yang dilakukan
  tambahanDone Int      @default(0) // Jumlah aktivitas tambahan yang dilakukan
  trophy       String? // BRONZE, SILVER, GOLD, STAR
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model WeeklyScore {
  id          String   @id @default(cuid())
  userId      String
  weekNumber  Int
  year        Int
  totalPoints Int
  skorPositif Int      @default(0)
  skorNegatif Int      @default(0)
  trophy      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, weekNumber, year])
}

model MonthlyScore {
  id          String   @id @default(cuid())
  userId      String
  month       Int
  year        Int
  totalPoints Int
  skorPositif Int      @default(0)
  skorNegatif Int      @default(0)
  trophy      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, month, year])
}

model ActivityTarget {
  id              String   @id @default(cuid())
  userCategory    String // mkidz atau laz
  activityId      String
  minDaily        Int      @default(0)
  maxDaily        Int
  pointMultiplier Float    @default(1.0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  activity Activity @relation(fields: [activityId], references: [id])

  @@unique([userCategory, activityId])
}

model UserLevel {
  id          String   @id @default(cuid())
  userId      String   @unique
  level       String // PRAJURIT, SERSAN, etc.
  skorTotal   Int      @default(0)
  skorPositif Int      @default(0)
  skorNegatif Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model UserPenalty {
  id        String    @id @default(cuid())
  userId    String
  type      String // YELLOW_CARD, RED_CARD
  reason    String
  startDate DateTime  @default(now())
  endDate   DateTime?
  resolved  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model ActivityCombo {
  id         String   @id @default(cuid())
  name       String
  activities String // Comma-separated activity IDs
  multiplier Float
  timeWindow Int // in minutes
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  active     Boolean  @default(true)

  activity Activity @relation("activityCombos", fields: [activities], references: [id])
}

model ActivityValidator {
  id          String   @id @default(cuid())
  activityId  String
  validatorId String
  role        String // KOORDINATOR_ANAKREMAS, ANAK_REMAS, etc
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  active      Boolean  @default(true)

  activity Activity @relation(fields: [activityId], references: [id])
  user     User     @relation("validatorUser", fields: [validatorId], references: [id])

  @@unique([activityId, validatorId])
}

model ActivityValidationHistory {
  id             String   @id @default(cuid())
  userActivityId String
  validatorId    String
  oldStatus      String // PENDING, VALIDATED, REJECTED
  newStatus      String // PENDING, VALIDATED, REJECTED
  notes          String?
  createdAt      DateTime @default(now())

  userActivity UserActivity @relation(fields: [userActivityId], references: [id])
  validator    User         @relation("validatorHistory", fields: [validatorId], references: [id])

  @@index([userActivityId])
}

model OrangTuaAnakRemas {
  id          String   @id @default(cuid())
  orangTuaId  String
  anakRemasId String
  createdAt   DateTime @default(now())

  orangTua  User @relation("orangTua", fields: [orangTuaId], references: [id])
  anakRemas User @relation("anakRemas", fields: [anakRemasId], references: [id])

  @@unique([orangTuaId, anakRemasId])
  @@map("orang_tua_anak_remas")
}

model PostView {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  ipAddress String
  userAgent String?
  createdAt DateTime @default(now())

  @@index([postId])
  @@index([userId])
  @@map("post_views")
}
